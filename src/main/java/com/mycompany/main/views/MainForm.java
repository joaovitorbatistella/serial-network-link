package com.mycompany.main.views;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.fazecast.jSerialComm.*;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import javax.swing.JFrame;
import com.mycompany.main.CRC16CCITT;
import com.mycompany.main.HandleSend;
import com.mycompany.main.HandleReceive;
import java.math.BigInteger;
import java.nio.ByteBuffer;
/**
 *
 * @author labhardware01
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainForm() {
        initComponents();
        fillDropBoxes();
    }
    
    public void fillDropBoxes()
    {
        dropboxOrigin.addItem("- -");
        dropboxTarget.addItem("- -"); int i;
        SerialPort[] commPorts = SerialPort.getCommPorts();
        for(i=0; i<commPorts.length; i++){
            dropboxOrigin.addItem(commPorts[i].getSystemPortName());
            dropboxTarget.addItem(commPorts[i].getSystemPortName());  
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainFormPanel = new javax.swing.JPanel();
        textAreaOrigin = new javax.swing.JTextArea();
        textAreaTarget = new javax.swing.JTextArea();
        dropboxOrigin = new javax.swing.JComboBox<>();
        dropboxTarget = new javax.swing.JComboBox<>();
        sendButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        openFileOrigin = new javax.swing.JButton();
        inputFilePickerOrigin = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        receiveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MainFormPanel.setBackground(java.awt.Color.darkGray);
        MainFormPanel.setForeground(new java.awt.Color(255, 255, 255));

        textAreaOrigin.setColumns(20);
        textAreaOrigin.setLineWrap(true);
        textAreaOrigin.setRows(5);
        textAreaOrigin.setFocusCycleRoot(true);

        textAreaTarget.setColumns(20);
        textAreaTarget.setLineWrap(true);
        textAreaTarget.setRows(5);
        textAreaTarget.setFocusCycleRoot(true);

        dropboxOrigin.setBackground(java.awt.Color.gray);
        dropboxOrigin.setForeground(new java.awt.Color(255, 255, 255));
        dropboxOrigin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropboxOriginActionPerformed(evt);
            }
        });

        dropboxTarget.setBackground(java.awt.Color.gray);
        dropboxTarget.setForeground(new java.awt.Color(255, 255, 255));
        dropboxTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropboxTargetActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        openFileOrigin.setText("Open");
        openFileOrigin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileOriginActionPerformed(evt);
            }
        });

        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("or");

        receiveButton.setText("Receive");
        receiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainFormPanelLayout = new javax.swing.GroupLayout(MainFormPanel);
        MainFormPanel.setLayout(MainFormPanelLayout);
        MainFormPanelLayout.setHorizontalGroup(
            MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(MainFormPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainFormPanelLayout.createSequentialGroup()
                        .addComponent(inputFilePickerOrigin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openFileOrigin))
                    .addGroup(MainFormPanelLayout.createSequentialGroup()
                        .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainFormPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(dropboxOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MainFormPanelLayout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(textAreaOrigin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAreaTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropboxTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(MainFormPanelLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(receiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainFormPanelLayout.setVerticalGroup(
            MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFormPanelLayout.createSequentialGroup()
                .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainFormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropboxTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dropboxOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textAreaOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textAreaTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainFormPanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openFileOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputFilePickerOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE))
                    .addComponent(jSeparator2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        textAreaOrigin.getAccessibleContext().setAccessibleName("textAreaOrigin");
        textAreaTarget.getAccessibleContext().setAccessibleName("textAreaTarget");
        dropboxOrigin.getAccessibleContext().setAccessibleName("dropboxOrigin");
        dropboxTarget.getAccessibleContext().setAccessibleName("dropboxTarget");
        sendButton.getAccessibleContext().setAccessibleName("sendButton");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dropboxTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropboxTargetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropboxTargetActionPerformed

    private void openFileOriginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileOriginActionPerformed
        // TODO add your handling code here:
        FileChooser fileChooser = new FileChooser();
        fileChooser.setVisible(true);
    }//GEN-LAST:event_openFileOriginActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        
        HandleSend handleSend = new HandleSend(
                                    textAreaOrigin.getText(),
                                        (String) dropboxOrigin.getSelectedItem()
                                    );
        
        handleSend.startTransaction();
        
//        SerialPort commPortOrigin = MainForm.openSerialConnection((String) dropboxOrigin.getSelectedItem());
//        SerialPort commPortTarget = MainForm.openSerialConnection((String) dropboxTarget.getSelectedItem());
//        this.addListeners(commPortOrigin, commPortTarget);
//        
//        String content;
//        //content = MainForm.addScapes(textAreaOrigin.getText());
//        content = textAreaOrigin.getText();
//        System.out.println("content: " + content);
//        int idx = 0;
//        int offset = 0;
//        int exit = 0;
//        int frameLength = 5;
//        byte origin = 00000001;
//        byte target = 00000010;
//        do {
//            String toFraming;
//            if(exit == 1) {
//                toFraming = content.substring(offset, content.length());
//                byte[] frame = MainForm.framming(toFraming, origin);
//                System.out.println("\nframming: ");
//                for (int i = 0; i < frame.length; ++i)
//                    System.out.print((char)frame[i]);
//                System.out.println("\n");
//                this.send(commPortOrigin, frame);
//                break;
//            } else {
//                if(content.length()-1 < frameLength) {
//                    toFraming = content.substring(offset, content.length());
//                    byte[] frame = MainForm.framming(toFraming, origin);
//                    System.out.println("\nframming: ");
//                    for (int i = 0; i < frame.length; ++i)
//                        System.out.print((char)frame[i]);
//                    System.out.println("\n");
//                    this.send(commPortOrigin, frame);
//                    break;
//                } 
//                
//                toFraming = content.substring(offset, offset+frameLength);
//                offset+=frameLength;
//                if((content.length() - offset) < content.length()) {
//                    exit = 1;
//                }
//                
//            
//            }
//            
//            
//            byte[] frame = MainForm.framming(toFraming, origin);
//            System.out.println("\nframming: ");
//            for (int i = 0; i < frame.length; ++i)
//                System.out.print((char)frame[i]);
//            System.out.println("\n");
//            this.send(commPortOrigin, frame);
//            idx++;
//        } while(true);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        SerialPort commPortOrigin = SerialPort.getCommPort((String) dropboxOrigin.getSelectedItem());
        SerialPort commPortTarget = SerialPort.getCommPort((String) dropboxTarget.getSelectedItem());
        commPortOrigin.closePort();
        commPortTarget.closePort();
    }//GEN-LAST:event_formWindowClosing

    private void dropboxOriginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropboxOriginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropboxOriginActionPerformed

    private void receiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveButtonActionPerformed
        // TODO add your handling code here:
        HandleReceive handleReceive = new HandleReceive(
                                        (String) dropboxTarget.getSelectedItem(),
                                         textAreaTarget
                                    );
        handleReceive.startReader();
    }//GEN-LAST:event_receiveButtonActionPerformed

    private static SerialPort openSerialConnection(String commPort)
    {
        SerialPort port = SerialPort.getCommPort(commPort);
        port.openPort();
        return port;
    }
    
    private void send(SerialPort port, byte[] frame) {
//        byte origin = 00000001;
//        byte target = 00000010;
        
        port.writeBytes(frame, frame.length);
    }
    
    private void addListeners(SerialPort origin, SerialPort target)
    {
        origin.addDataListener(new SerialPortDataListener() {
            @Override
            public int getListeningEvents() { return SerialPort.LISTENING_EVENT_DATA_RECEIVED; }
                @Override
            public void serialEvent(SerialPortEvent event)
            {
                byte[] newData = event.getReceivedData();
                System.out.println("\nReceived data of size: " + newData.length + "\n");
                for (int i = 0; i < newData.length; ++i)
                    System.out.print((byte)newData[i] + " , ");
                System.out.println("\n");
                
//                byte[] ackFrame = MainForm.framming("", target);
//                commPortOrigin.writeBytes(ackFrame, ackFrame.length);
            }
         });
        
        target.addDataListener(new SerialPortDataListener() {
            @Override
            public int getListeningEvents() { return SerialPort.LISTENING_EVENT_DATA_RECEIVED; }
                @Override
            public void serialEvent(SerialPortEvent event)
            {
                byte[] newData = event.getReceivedData();
                System.out.println("\nReceived data of size: " + newData.length + "\n");
                for (int i = 0; i < newData.length; ++i)
                    System.out.print((byte)newData[i]);
                System.out.println("\n");
            }
         });
    }
    

    private static byte[] framming(String content, byte address)
    {
        //char scapeCharacter = '*';
        //char startTextCharacter = '~';
        //char endTextCharacter = '|';joao vitor batistella
        byte startEndFrame = '~';
        byte ack = 1;
        
        String data;
        //data = scapeCharacter + startTextCharacter + content + scapeCharacter + endTextCharacter;
        data = content;
        
        String hexCRC = CRC16CCITT.main(data);
        byte[] crc = MainForm.hexStringToByte(hexCRC);
        
//        System.out.println("\nstartEndFrame: " + startEndFrame);
//        System.out.println("\naddress: " + address);
//        System.out.println("\nack: " + ack);
//        System.out.println("\ndata: " + data);
//        System.out.println("\ncrc[0]: " + crc[0]);
//        System.out.println("\ncrc[1]: " + crc[1]);
//        System.out.println("\nstartEndFrame: " + startEndFrame +"\n\n");
        
        byte[] preFrame = {startEndFrame, address, ack};
        byte[] dataFrame = data.getBytes();
        byte[] postFrame = {crc[0], crc[1], startEndFrame};

        return ByteBuffer.allocate(preFrame.length + dataFrame.length + postFrame.length)
                .put(preFrame)
                .put(dataFrame)
                .put(postFrame)
                .array();
    }
    
    private static byte[] hexStringToByte (String hex)
    {
        int val = Integer.parseInt(hex, 16);

        BigInteger big = BigInteger.valueOf(val);
        byte[] ans = (big.toByteArray());
        return ans;
    }
        
     private static String addScapes(String content) 
    {
        // enquadramento por utilização de byte de inicio e fim de quadro com inserção de caractere de escape
        char scapeCharacter = '*';
        
        int index = 0;
        for(char ch: content.toCharArray()) {
            if(ch == scapeCharacter) {
                content = addChar(content, scapeCharacter, index);
                index +=2;
            } else {
                index++;
            }
            
        }
        
        return content;
    }
    
    public static String addChar(String str, char ch, int position) {
        int len = str.length();
        char[] updatedArr = new char[len + 1];
        str.getChars(0, position, updatedArr, 0);
        updatedArr[position] = ch;
        str.getChars(position, len, updatedArr, position + 1);
        return new String(updatedArr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainFormPanel;
    private javax.swing.JComboBox<String> dropboxOrigin;
    private javax.swing.JComboBox<String> dropboxTarget;
    private javax.swing.JTextField inputFilePickerOrigin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton openFileOrigin;
    private javax.swing.JButton receiveButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea textAreaOrigin;
    private javax.swing.JTextArea textAreaTarget;
    // End of variables declaration//GEN-END:variables
}
